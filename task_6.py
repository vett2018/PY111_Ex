"""
Аренда ракет
Вы – компания, дающая в аренду ракеты. Каждый день к вам приходит список заявок
на использование ракет в виде: (час_начала, час_конца), (час_начала, час_конца), ...
Если аренда ракеты заканчивается в час X, то в этот же час ее уже можно взять в аренду снова (т.е. час_начала может начинаться с Х).
Дано: список заявок на использование ракет
Задача: вывести ответ, хватит ли вам одной ракеты, чтобы удовлетворить все заявки на этот день
"""

def rent_rocket(list_: list) -> bool:
    """
На вход принимается список заявок list_, каждая заявка в списке представлена в виде (час начала и час конца).
Производится сравнение времени окончания каждой заявки с временем начала следующей.
Если такое пересечение есть, функция возвращает что заявка не удовлетворяет .
Если же такого пересечения нет, функция возвращает сообщение об удовлетворении заявки.
    :param list_: Список заявок (час начала и час конца)
    :return: Вывод сообщения об удовлетворении заявки на ракету
    """
    list_.sort() # заявки сортируются по времени начала аренды
    for i in range(len(list_) - 1):
        if list_[i][1] > list_[i + 1][0]:
            return print("Заявка не удовлетворяет аренду ракеты")
    return print("Заявка удовлетворяет аренду ракеты")

if __name__ == '__main__':
    list1 = [(18, 19), (13, 15), (9, 10), (10, 12), (12, 13)]
    list2 = [(13, 15), (14, 18)]
    rent_rocket(list1)
    rent_rocket(list2)
