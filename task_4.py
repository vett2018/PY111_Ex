"""
Навигатор на сетке.
Дана плоская квадратная двумерная сетка (массив), на которой определена стоимость захода в каждую ячейку
(все стоимости положительные). Необходимо найти путь минимальной стоимости из заданной ячейки
в заданную ячейку и вывести этот путь.
"""

if __name__ == '__main__':
    mas = [[4, 7, 8, 6, 4],
           [6, 7, 3, 9, 2],
           [3, 8, 1, 2, 4],
           [7, 1, 7, 3, 7],
           [2, 9, 8, 9, 3]]

    # Матрица N x M
    M = len(mas) #длина всего списка
    N = len(mas[0]) #длина вложенного списка

    mas_2 = [[0 for x in range(N)] for y in range(M)] #второй массив инициализирую нулями
    for i in range(M):
        for j in range(N):
            mas_2[i][j] = mas[i][j]

            # заполнение первой строки (есть только один способ добраться до любой ячейки в первой строке из соседней левой ячейки)
            if i == 0 and j > 0:
                mas_2[0][j] = mas_2[0][j] + mas_2[0][j - 1]

            # заполнение первоо столбца (есть только один способ добраться до любой ячейки в первом столбце из соседней верхней ячейки)
            elif j == 0 and i > 0:
                mas_2[i][0] = mas_2[i][0] + mas_2[i - 1][0]

            # заполнение остальной части массива (есть два способа добраться до любого клетки в остальной части матрицы,
            # от соседней левой ячейки или соседней верхней ячейки)
            elif i > 0 and j > 0:
                mas_2[i][j] = mas_2[i][j] + min(mas_2[i - 1][j], mas_2[i][j - 1])

    # последняя ячейка mas_2[][] хранит минимальную стоимость достижения ячейки назначения (M-1, N-1) из исходной ячейки (0, 0)
    print(f'Минимальная стоимость пути = {mas_2[M - 1][N - 1]}')